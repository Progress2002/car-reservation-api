---
openapi: 3.0.1
info:
  title: CarBooker API V1
  version: v1
paths:
  "/api/v1/cars":
    get:
      summary: Fetch all cars
      tags:
      - Cars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    user_id:
                      type: integer
                    name:
                      type: string
                    image:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
                    model:
                      type: string
                  required:
                  - id
                  - user_id
                  - name
                  - price
  "/api/v1/cars/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Fetch a car
      tags:
      - Cars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user_id:
                    type: integer
                  name:
                    type: string
                  image:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                  model:
                    type: string
                required:
                - id
                - user_id
                - name
                - price
    post:
      summary: Create a new car
      tags:
      - Cars
      parameters: []
      responses:
        '201':
          description: Car created successfully
        '422':
          description: Invalid data - Car not created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                name:
                  type: string
                image:
                  type: string
                description:
                  type: string
                price:
                  type: number
                model:
                  type: string
              required:
              - user_id
              - name
              - price
    delete:
      summary: Delete a car by ID
      tags:
      - Cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Car deleted successfully
        '404':
          description: Car not found
  "/api/v1/reservations":
    get:
      summary: Fetch all reservations
      tags:
      - Reservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    start_date:
                      type: string
                      format: date
                    end_date:
                      type: string
                      format: date
                    city:
                      type: string
                    user_id:
                      type: integer
                    car_id:
                      type: integer
                  required:
                  - id
                  - start_date
                  - end_date
                  - city
                  - user_id
                  - car_id
    post:
      summary: Create a new reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: Reservation created successfully
        '422':
          description: Invalid data - Reservation not created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
                city:
                  type: string
                user_id:
                  type: integer
                car_id:
                  type: integer
              required:
              - start_date
              - end_date
              - city
              - user_id
              - car_id
    delete:
      summary: Delete a reservation by ID
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Reservation deleted successfully
  "/api/v1/users":
    get:
      summary: Fetch all users
      tags:
      - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                  required:
                  - id
                  - username
                  - email
    post:
      summary: Create a new user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User created successfully
        '422':
          description: Invalid data - User not created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - username
              - email
              - password
    delete:
      summary: Delete a user by ID
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
  "/api/v1/users/{id}":
    get:
      summary: Fetch a user by ID
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                required:
                - id
                - username
                - email
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
